import numpy as np

data = np.array([[0.5, 0.9], [0.3, 0.7], [1.1, 2.3], [2.0, 4.3], [3.5, 6.8], [4.1, 8], [0, 0.1], [5.8, 11]])
theta_0 = 0
theta_1 = 0
alpha = 0.1
min_dif = 0.01

def partial_0_J(a, b):
    J = 0
    for i in data:
        J += (a + b * i[0] - i[1])
    J /=  len(data)
    return J

def partial_1_J(a, b):
    J = 0
    for i in data:
        J += (a + b * i[0] - i[1]) * i[0]
    J /=  len(data)
    return J

def J(a, b):
    J = 0
    for i in data:
        J += (a + b * i[0] - i[1]) ** 2
    J /= len(data)
    return J

prev_J = J(theta_0, theta_1)
temp = theta_0
theta_0 = theta_0 - alpha * partial_0_J(theta_0, theta_1)
theta_1 = theta_1 - alpha * partial_1_J(temp, theta_1)
current_J = J(theta_0, theta_1)

while (current_J - prev_J) > min_dif:
    prev_J = current_J
    temp = theta_0
    theta_0 = theta_0 - alpha * partial_0_J(theta_0, theta_1)
    theta_1 = theta_1 - alpha * partial_1_J(temp, theta_1)
    current_J = J(theta_0, theta_1)
    print(theta_0)
    print(theta_1)

print(theta_0)
print(theta_1)
